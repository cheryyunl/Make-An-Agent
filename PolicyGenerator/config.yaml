name: train_policy_generator
task: policy_generator

task_name: policy_generator
shape_meta: &shape_meta
  trajectory:
    shape: [128]
  task:
    shape: [128]
  params:
    shape: [2, 1024]

exp_name: "policy_generator"

num_trajectory: 1
n_latency_steps: 0

policy:
  _target_: policy_generator.policy.policy_generator.PolicyGenerator
  condition_type: film
  use_down_condition: true
  use_mid_condition: true
  use_up_condition: true
  
  diffusion_step_embed_dim: 128
  down_dims:
  - 512
  - 1024
  - 2048
  kernel_size: 3
  n_groups: 8
  num_trajectory: ${num_trajectory}

  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddim.DDIMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    clip_sample: True
    set_alpha_to_one: True
    steps_offset: 0
    prediction_type: sample


  num_inference_steps: 10
  shape_meta: ${shape_meta}
  use_traj: False
  use_task: False
  concat: True


ema:
  _target_: policy_generator.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

data:
  batch_size: 128
  num_workers: 8
  data_root: '/path/traindata'

eval:
  env_name: ''
  ckpt_dir: '/path/pretrain_model/diffusion.torch'
  encoder_dir: '/path/pretrain_model/encoder.ckpt'
  data_dir: '/path/testdata'

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 5.0e-4

train:
  device: "cuda:0"
  seed: 3407
  debug: False
  resume: False
  lr_scheduler: cosine
  lr_warmup_steps: 500
  num_epochs: 1000
  gradient_accumulate_every: 1
  use_ema: True
  checkpoint_every: 5
  val_every: 1
  sample_every: 5
  max_train_steps: null
  max_val_steps: null
  tqdm_interval_sec: 1.0
  finetune: False

logging:
  group: ${exp_name}
  id: null
  mode: online
  name: ${train.seed}_${data.batch_size}_${optimizer.lr}
  project: policy_generator
  resume: true
  tags:
  - policy_generator

checkpoint:
  topk:
    monitor_key: test_mean_score
    mode: max
    k: 1
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
  save_last_ckpt: False # this only saves when save_ckpt is True
  save_best_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}
    subdir: ${hydra.job.num}
